# Simple Resource Guide for Beginners

## What is a Resource?
A resource represents a type of data or object in your application. It helps you manage and organize information.

## Basic Resource Structure

```javascript
// A simple way to create a resource for managing data
class ResourceName {
  // This creates a new resource
  constructor() {
    // You can store data here if needed
    this.items = [];
  }

  // Get all items in the resource
  getAll() {
    return this.items;
  }

  // Add a new item to the resource
  add(item) {
    this.items.push(item);
    return item;
  }

  // Create a new item
  create(item) {
    item.id = this.items.length + 1;
    this.items.push(item);
    return item;
  }

  // Find an item by its unique identifier
  findById(id) {
    return this.items.find(item => item.id == id);
  }

  // Update an existing item
  update(id, newData) {
    const index = this.items.findIndex(item => item.id == id);
    if (index !== -1) {
      this.items[index] = { ...this.items[index], ...newData };
      return this.items[index];
    }
    return null;
  }

  // Delete an item from the resource
  delete(id) {
    const index = this.items.findIndex(item => item.id == id);
    if (index !== -1) {
      return this.items.splice(index, 1)[0];
    }
    return null;
  }
}

// Create an instance of the resource
const resourceName = new ResourceName();

// Basic routing implementation
const handleRequest = (req, res) => {
  try {
    switch (req.method) {
      case "GET":
        // Get all items
        res.writeHead(200, { "Content-Type": "application/json" });
        res.end(JSON.stringify(resourceName.getAll()));
        break;
      case "POST":
        // Add a new item
        let body = "";
        req.on("data", (chunk) => {
          body += chunk.toString();
        });
        req.on("end", () => {
          const item = JSON.parse(body);
          const newItem = resourceName.create(item);
          res.writeHead(201, { "Content-Type": "application/json" });
          res.end(JSON.stringify(newItem));
        });
        break;
      case "PUT":
        // Update an existing item
        const id = req.url.split("/")[2]; // Extract ID from URL
        let updateBody = "";
        req.on("data", (chunk) => {
          updateBody += chunk.toString();
        });
        req.on("end", () => {
          const updatedData = JSON.parse(updateBody);
          const updatedItem = resourceName.update(id, updatedData);
          if (updatedItem) {
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify(updatedItem));
          } else {
            res.writeHead(404, { "Content-Type": "text/plain" });
            res.end("Item not found");
          }
        });
        break;
      case "DELETE":
        // Remove an item
        const deleteId = req.url.split("/")[2]; // Extract ID from URL
        const deletedItem = resourceName.delete(deleteId);
        if (deletedItem) {
          res.writeHead(200, { "Content-Type": "text/plain" });
          res.end("Item deleted");
        } else {
          res.writeHead(404, { "Content-Type": "text/plain" });
          res.end("Item not found");
        }
        break;
      default:
        res.writeHead(405, { "Content-Type": "text/plain" });
        res.end("Method not allowed");
    }
  } catch (error) {
    // Global error handling
    console.error("Error:", error);
    res.writeHead(500, { "Content-Type": "text/plain" });
    res.end("Internal Server Error");
  }
};

```

## Example: User Resource

```javascript
class User {
  constructor() {
    this.users = [];
  }

  // Create a new user
  createUser(name, email) {
    const user = {
      id: this.users.length + 1,
      name: name,
      email: email
    };
    this.users.push(user);
    return user;
  }

  // Get all users
  getAllUsers() {
    return this.users;
  }
}

// Create a user resource
const userResource = new User();
```

## Key Concepts

### What to Include
- Methods for adding data
- Methods for retrieving data
- Methods for updating data
- Methods for removing data

### What to Avoid
- Complex configurations
- Unnecessary export statements
- Overly technical implementations

## Tips for Beginners
- Start with simple methods
- Focus on understanding how data is managed
- Don't worry about advanced techniques yet
- Ask for help when you're stuck

## Common Methods
1. `add()` or `create()`: Add new items
2. `getAll()`: Retrieve all items
3. `findById()`: Find a specific item
4. `update()`: Change item details
5. `remove()`: Delete an item

## Learning Goals
- Understand basic data management
- Learn how to organize information
- Practice creating simple classes
- Develop problem-solving skills

Remember: Keep it simple, and don't be afraid to experiment!
